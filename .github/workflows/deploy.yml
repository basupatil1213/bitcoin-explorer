name: Deploy to GCP

on:
  push:
    branches:
      - main

jobs:
  # connect-to-gcp:
  #   name: Connect to GCP
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
    
  #   - id: 'auth'
  #     uses: 'google-github-actions/auth@v2'
  #     with:
  #       credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

  #   - name: Set up gcloud Cloud SDK environment
  #     uses: google-github-actions/setup-gcloud@v2.1.1
    
  #   - name: 'Use gcloud CLI'
  #     run: 'gcloud info'
  
  # build-rust:
  #   name: Build Rust Docker Image
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   - name: Build and Push Rust Docker Image
  #     run: |
  #       ls
  #       docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/rust-data-fetch ./rust-data-fetch/
  #       docker tag ${{ secrets.DOCKERHUB_USERNAME }}/rust-data-fetch:latest ${{ secrets.DOCKERHUB_USERNAME }}/rust-data-fetch:latest
  #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/rust-data-fetch:latest

  # build-webapp:
  #   name: Build Next.js Docker Image
  #   runs-on: ubuntu-latest
  #   needs: build-rust  # Build after Rust image

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
     
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
        
  #   - name: Build and Push Next.js Docker Image
  #     run: |
  #       docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-explorer-webapp ./webapp/
  #       docker tag ${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-explorer-webapp:latest ${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-explorer-webapp:latest
  #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-explorer-webapp:latest

  deploy:
    name: Deploy to GCP VM
    runs-on: ubuntu-latest
    # needs: [build-rust, build-webapp]  # Ensure both images are built

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    - name: Create VM instance if it doesn't exist
      run: |
        INSTANCE_NAME=${{ secrets.GCP_INSTANCE_NAME }}
        ZONE=${{ secrets.GCP_ZONE }}
        MACHINE_TYPE="n1-standard-1"  # Specify your desired machine type
        IMAGE_FAMILY="debian-11"  # Specify your desired image family
        IMAGE_PROJECT="debian-cloud"  # Specify the project for the image family
    
        # Check if the VM instance exists
        if ! gcloud compute instances describe "$INSTANCE_NAME" --zone "$ZONE" &>/dev/null; then
          echo "Creating VM instance $INSTANCE_NAME..."
          gcloud compute instances create "$INSTANCE_NAME" --zone "$ZONE" --machine-type "$MACHINE_TYPE" --image-family "$IMAGE_FAMILY" --image-project "$IMAGE_PROJECT"
        else
          echo "VM instance $INSTANCE_NAME already exists."
        fi
    
        # Connect to the VM and install Docker if it's not installed
        gcloud compute ssh "$INSTANCE_NAME" --zone "$ZONE" --command "
        if ! command -v docker &> /dev/null; then
          echo 'Docker not found. Installing...'
          
          # Remove any existing Docker packages
          for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do 
            sudo apt-get remove -y \$pkg || true; 
          done
          
          # Update the package index
          sudo apt-get update -y
          
          # Install required packages
          sudo apt-get install -y ca-certificates curl
          
          # Create a keyring directory and download Docker's official GPG key
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo tee /etc/apt/keyrings/docker.gpg > /dev/null
          
          # Set permissions for the GPG key
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          
          # Add Docker's repository to APT sources
          echo 'deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \$(lsb_release -cs) stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Update the package index again
          sudo apt-get update -y
          
          # Install Docker
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          echo 'Docker installed successfully.'
        else
          echo 'Docker is already installed.'
        fi
        "

      
    - name: Deploy Rust application
      run: |
        # Define your Docker image
        IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/rust-data-fetch:latest"

        # Connect to the VM and run the Docker container
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone ${{ secrets.GCP_ZONE }} --command "sudo docker run -d --restart always --name rust-data-fetch \
          -e POSTGRES_HOST=${{secrets.GCP_SQL_HOST}} \
          -e POSTGRES_DB= ${{secrets.POSTGRES_DB}} \
          -e POSTGRES_USER=${{secrets.POSTGRES_USERNAME}} \
          -e POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} \
          -e POSTGRES_PORT=${{secrets.POSTGRES_PORT}} \
          $IMAGE"

    - name: Deploy Next.js application
      run: |
        # Define your Docker image
        IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/bitcoin-explorer-webapp:latest"

        # Connect to the VM and run the Docker container
        gcloud compute ssh ${{ secrets.GCP_INSTANCE_NAME }} --zone ${{ secrets.GCP_ZONE }} --command "sudo docker run -d --restart always -p 3000:3000 --name bitcoin-explorer-webapp \
          -e DB_USER=${{secrets.POSTGRES_USERNAME}} \
          -e DB_HOST=${{secrets.GCP_SQL_HOST}}
          -e DB_NAME=${{secrets.POSTGRES_DB}} \
          -e DB_PASSWORD=${{secrets.POSTGRES_PASSWORD}} \
          -e DB_PORT=${{secrets.POSTGRES_PORT}} \
          $IMAGE"
